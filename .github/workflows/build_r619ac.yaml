#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
####@
name: Compile R619AC TVH OpenWrt Images  

on:
  workflow_dispatch:    
  #push:
   #branches: 
    #- master
  #schedule:
   # - cron: "20 13 * * *"
  #release:
   # types: [published]
  watch:
    types: started

  #workflow_dispatch:    
    
env:
  #####change model here ####@# 
  ROUTER_MODEL: r619ac
  TVH: true
  CONFIG_FILENAME_FOR_2ND_COMPILE: config.r619ac.2.bak
  BUILD_KERNEL_MODULES: true
  DRIVERS_DIR: x-wrt/bin/targets/ipq40xx/drivers
  KERNEL_CONFIG: 'myconfig/kernel_config.r619ac'
  KERNEL_CONFIG_DIR: x-wrt/target/linux/ipq40xx
  #KERNEL_CONFIG_DIR: target/linux/ramips/mt7620
  #KERNEL_CONFIG_DIR: target/linux/ramips/mt7621
  #KERNEL_CONFIG_DIR: target/linux/mvebu
  MAKEMENU_CONFIG: true
  KERNEL_MENUCONFIG: false
  CPU_MULTI_CORE: true
  #5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4
  KERNEL_VERSION: '5.15'
  ##  KERNEL_VERSION: '5.10'                                                                            
  UPDATE_MULTI_CORE_FILE1: myconfig/sys.lua
  UPDATE_MULTI_CORE_FILE2: myconfig/processes.js
  KERNEL_MODULE: myconfig/kernel_modules.txt
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai
  
jobs:

  build_openwrt:
    ###@####
    name: Build R619AC  TVH firmware

    runs-on: ubuntu-latest
    continue-on-error: true 
    #runs-on: ubuntu-22.10
    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Check CPU model
        run: |                                                    
          cat /proc/cpuinfo|grep model                            
          cat /proc/cpuinfo|grep proce 
  
      - name: Update feeds & Load custom configuration
        run: |
          #cat /proc/cpuinfo|grep model
          #cat /proc/cpuinfo|grep proce
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH
          sudo timedatectl set-timezone "$TZ"
          
     
      - name: Generate cache mixkey
        id: gen_cache_mixkey
        working-directory: ${{ env.WORKING_DIR }}
        run: |                                   
          target_device_arch_1="ipq40xx"           
          #target_device_arch_2="ramips"
          gcc_hash=$(gcc --version | sha256sum | awk '{print substr($1,1,8)}')
          ldd_hash=$(ldd --version | sha256sum | awk '{print substr($1,1,8)}')
          mixkey1="${target_device_arch_1}-${gcc_hash}-${ldd_hash}"           
          #mixkey2="${target_device_arch_2}-${gcc_hash}-${ldd_hash}"          
          echo "mixkey1=$mixkey1" >> $GITHUB_OUTPUT                           
      - name: Cache1                                                          
        uses: HiGarfield/cachewrtbuild@main                                   
        with:                                                                 
          ccache: 'true'                                                   
          mixkey: ${{ steps.gen_cache_mixkey.outputs.mixkey1 }}     
          #prefix: ${{ env.WORKING_DIR }}                           
          prefix: ${{ github.workspace }}/x-wrt                     
          #skip_saving: 'true'    
          #  /usr/bin/tar -xf /home/runner/work/_temp/1a144490-77f9-4c00-ae54-698cee23f6b0/cache.tgz -P -C /home/runner/work/Actions-OpenWrt/Actions-OpenWrt -z
 
      #- name: Cache    
        #Euses: stupidloud/cachewrtbuild@main
        #with:
         #ccache: 'true'
         #mixkey: 'ipq40xx'
         #prefix: ${{ github.workspace }}/x-wrt
         
      #- name: Generate cache mixkey
        #id: gen_cache_mixkey
        #working-directory: ${{ env.WORKING_DIR }}
       # run: |
          #target_device_arch_1="ipq40xx"
          #target_device_arch_2="ramips"
          #gcc_hash=$(gcc --version | sha256sum | awk '{print substr($1,1,8)}')
         # ldd_hash=$(ldd --version | sha256sum | awk '{print substr($1,1,8)}')
         # mixkey1="${target_device_arch_1}-${gcc_hash}-${ldd_hash}"
         # mixkey2="${target_device_arch_2}-${gcc_hash}-${ldd_hash}"
        #  echo "mixkey1=$mixkey1" >> $GITHUB_OUTPUT
         # echo "mixkey2=$mixkey2" >> $GITHUB_OUTPUT
      
     # - name: Cache1
      #  uses: HiGarfield/cachewrtbuild@main
       # with:
        #  ccache: 'true'
        #  mixkey: ${{ steps.gen_cache_mixkey.outputs.mixkey1 }}
        #  prefix: ${{ env.WORKING_DIR }}

       
      #- name: Cache
        #uses: klever1988/cachewrtbuild@main
        #with:
          #ccache: 'true'
          #prefix: ${{ github.workspace }}/x-wrt
         #with:
         # ccache: 'true'
         # prefix: ${{ github.workspace }}/x-wrt
          #是否缓存工具链目录
          #toolchain: true

          #是否跳过工具链编译
          #skip: false

          #清空缓存
          #clean: true
          #prefix: ${{ github.workspace }}/x-wrt
      - name: Space cleanup
        env:
          SSH_ACTIONS: true
          DEBIAN_FRONTEND: noninteractive
        run: |
          ls -alt ${{ github.workspace }}/x-wrt/staging_dir/*
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install opencc ccache build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libfuse-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          #sudo -E apt-get update
          #sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libfuse-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5 --fix-missing
          sudo -E apt-get -y autoremove --purge
          #sudo pip install ply 
          #sudo -E python3 -m pip install --upgrade pip 
          #sudo -E pip install --no-cache-dir --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools
          sudo -E apt-get clean
          df -kh
          #find /home/runner/work/_temp/ -name "*cache*"
     # - name: Run migrations
      #  run: sh ./github/scripts/migrate.sh
       # env:
        # ENVIRONMENT_VARIABLE_NAME: ${{ secrets.ENVIRONMENT_VARIABLE_NAME }}
          # echo 'HELLO_WORLD='${{ secrets.HELLO_WORLD }} >> .env // Code line 1
    
    #
      #- name: Generate configuration file
       #  run: |
         
          #rm -f ./.config*
          #touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          #cat >> .config <<EOF
          #CONFIG_TARGET_IMAGES_GZIP=y
          #CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          #CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          #EOF

          #
          # ===============================================================
          # 

       #   sed -i 's/^[ \t]*//g' ./.config
        #  make defconfig

      - name: Make download
        run: |
          cd x-wrt 
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
          #git reset --hard 639419e
          #git revert 1a9ee367343edce263f82cc91a49d796c9d45ea3
          #git revert 41e1e838fbbb0308ad7353a3714e04b8c4585e7e
            
      - name: SSH connection for make menuconfig    
        if: env.MAKEMENU_CONFIG == 'true'
        uses: P3TERX/ssh2actions@main
        #uses: lhotari/action-upterm@v1
        #uses: mxschmitt/action-tmate@v1
        #uses: csexton/debugger-action@master
        env:
         TELEGRAM_BOT_TOKEN: '5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4'
         TELEGRAM_CHAT_ID: 1373335316
      
      - name: Compile firmware
        run: |
          cd x-wrt
          # rm dl/rrdtool*
          #wget https://oss.oetiker.ch/rrdtool/pub/archive/rrdtool-1.0.x/rrdtool-1.0.50.tar.gz
          #wget https://lftp.yar.ru/ftp/lftp-4.9.2.tar.xz
          #cd ../
          ##cp $GITHUB_WORKSPACE/myconfig/config.r619ac.2 .config
          make -j$(nproc) || make -j1 V=s
          [ $? != 0 ] && make V=s || echo "build success"
          
          #make V=99 2>&1 |tee build.log
          #     echo "======================="
          #echo "Space usage:"
          #echo "======================="
          df -kh
          #echo "======================="
          #du -h ./ --max-depth=1
          #du -h ~/work/x-wrt --max-depth=1 || true

      
      -  name: SSH connection for failure Debug
         if: ${{ failure() }}
           #uses: lhotari/action-upterm@v1
         uses: P3TERX/ssh2actions@main
         env:
          TELEGRAM_BOT_TOKEN: '5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4'
          TELEGRAM_CHAT_ID: '1373335316'

      - name: SSH connection for KERNEL MENU CONFIG
        if: env.KERNEL_MENUCONFIG == 'true'
          # uses: lhotari/action-upterm@v1
        uses: P3TERX/ssh2actions@main
        env:
         TELEGRAM_BOT_TOKEN: '5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4'
         TELEGRAM_CHAT_ID: 1373335316

 
      - name: Compile again after .config updated or add kernel modules
        if: env.BUILD_KERNEL_MODULES == 'true'
        run: |
           #cp $GITHUB_WORKSPACE/lede/target/linux/generic/backport-5.10/35?*.patch $GITHUB_WORKSPACE/x-wrt/target/linux/generic/backport-5.10/
           #cp $GITHUB_WORKSPACE/lede/package/kernel/linux/modules/fs.mk $GITHUB_WORKSPACE/x-wrt/package/kernel/linux/modules/ 
           #cp myconfig/config.r619ac.2 x-wrt/.config
           
           #cp myconfig/config.$ROUTER_MODEL.2 x-wrt/.config 
           cp myconfig/$CONFIG_FILENAME_FOR_2ND_COMPILE x-wrt/.config
           cp -f x-wrt/build_dir/target-*/busybox-*/busybox-*/ipkg-install/bin/busybox $DRIVERS_DIR 
           ##cat myconfig/config.tvh.ffmpeg >> x-wrt/.config
           
           #cat myconfig/config.tvh.ffmpeg >> .config
           [ -e $KERNEL_CONFIG ] && cp -f $KERNEL_CONFIG $KERNEL_CONFIG_DIR/config-$KERNEL_VERSION
           cd x-wrt 
           #make kernel_menuconfig -j2
           make -j$(nproc) || make -j1 
           [ $? != 0 ] && make V=s || echo "build success" 
           df -kh
      - name: SSH connection for failure Debug
        if: ${{ failure() }}
        #uses: lhotari/action-upterm@v1
        uses: P3TERX/ssh2actions@main
        env:
          TELEGRAM_BOT_TOKEN: '5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4'
          TELEGRAM_CHAT_ID: '1373335316'
      - name: Prepare artifact
        run: |
          # mkdir -p ./artifact/firmware
          #mkdir -p ./artifact/package
          #mkdir -p ./artifact/buildinfo
          #mkdir -p $DRIVERS_DIR
          cp -f `find x-wrt/build_dir/target*/linux*/linux-*/ -name *.ko` $DRIVERS_DIR
          cp -f x-wrt/build_dir/target*/linux*/rtl8821cu*/rtl8821cu.ko $DRIVERS_DIR        
          #cp -f .config bin/
          #cp -f myconfig/config.$ROUTER_MODEL.? bin/
          #rm -rf $(find ./bin/targets/ -type d -name "packages")
          #cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          #cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          #cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cat `find x-wrt/bin/targets/ -name version.buildinfo`|head -1|cut -c1-6> BUILD_VERSION
          [ -s BUILD_VERSION ] && echo "BUILD_VERSION=_$(cat BUILD_VERSION)" >> $GITHUB_ENV 
          grep '^CONFIG_TARGET.*DEVICE.*=y' x-wrt/.config|head -1 | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          strings $DRIVERS_DIR/usbhid.ko |grep linux-|tail -1|tail -c15|cut -d - -f2 > KERNEL_VER
          #strings $DRIVERS_DIR/rtl8821cu.ko |grep linux-|tail -1|tail -c15|cut -d - -f2 > KERNEL_VER
          [ -s KERNEL_VER ] && echo "KERNEL_VER=_$(cat KERNEL_VER)" >> $GITHUB_ENV
      - name: Upload bin directory
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.BUILD_VERSION }}${{ env.FILE_DATE }}${{ env.KERNEL_VER}}
           #OpenWrt_bin_${{ env.ROUTER_MODEL }}
          path: x-wrt/bin
      - name: SSH connection for failure Debug
        if: ${{ failure() }}
        uses: P3TERX/ssh2actions@main
        env:
         TELEGRAM_BOT_TOKEN: '5352319218:AAGkspTTlIjIRyfYlI7Egz4NciZ78bT3NF4'
         TELEGRAM_CHAT_ID: '1373335316'
        ### also try to upload if fixed by ssh to server ####
        
      - name: Upload bin directory if failure
        uses: actions/upload-artifact@master
        if:  failure() 
        with:
          name: OpenWrt_bin_${{ env.DEVICE_NAME }}${{ env.BUILD_VERSION }}${{ env.FILE_DATE }}${{ env.KERNEL_VER}}
           #OpenWrt_bin_${{ env.ROUTER_MODEL }}_failure
          path: x-wrt/bin


            #- name: Deliver buildinfo
            #uses: actions/upload-artifact@v2
            #with:
            #name: OpenWrt_buildinfo
            #path: ./artifact/buildinfo/

            
            #- name: Deliver package
            #uses: actions/upload-artifact@v2
            #with:
            #name: OpenWrt_package
            #path: ./artifact/package/

            #- name: Deliver firmware
            #uses: actions/upload-artifact@v2
        #with:
        #name: OpenWrt_firmware
        #path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
